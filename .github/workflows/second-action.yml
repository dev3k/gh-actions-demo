name: Second Workflow - Test Project & Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
      - "dev-*" # dev-new dev-is-new
      - "feature/**" # feature/new feature/new/button
      - "!test"
    # branches-ignore: # ignore branches in this workflow
    #   - test
    # cant be used you may only define one of `branches` and `branches-ignore` for a single event
    paths-ignore: # ignore pathes for push
      - ".github/workflows/*"
      - "env-variablies/*"
  pull_request:
    types:
      - opened
      - reopened
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Git Code
        uses: actions/checkout@v3
      - name: Install NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} #build a dynamic key to revalidate if lock file changed
      - name: Install Dependencies
        run: |
          cd second-action-react
          npm ci
      - name: Run Tests
        run: cd second-action-react && npm test
  build:
    # add waiting for testing jobs first, id needs missing it will run in parallel
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }} #check id in publish JS filename
    steps:
      - name: Git Code
        uses: actions/checkout@v3
      - name: Install NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
          key: deps-node-modules-${{ hashFiles('second-action-react/package-lock.json') }} #build a dynamic key to revalidate if lock file changed, use **/file to look into all files and compine one hash
      - name: Install Dependencies
        run: |
          cd second-action-react
          npm ci
      - name: Build Project
        run: cd second-action-react && npm run build
      - name: Publish JS filename
        id: publish
        run: find second-action-react/dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            second-action-react/dist
            second-action-react/package.json
  deploy:
    # add waiting for testing jobs first, id needs missing it will run in parallel
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files #same name as in build run
      - name: Output Build Files Content
        run: ls dist
      - name: Output JS filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying ..."
