name: Second Workflow - Test Project & Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
      - "dev-*" # dev-new dev-is-new
      - "feature/**" # feature/new feature/new/button
      - "!test"
    # branches-ignore: # ignore branches in this workflow
    #   - test
    # cant be used you may only define one of `branches` and `branches-ignore` for a single event
    paths-ignore: # ignore pathes for push
      - ".github/**"
      - "env-variables/*"
  pull_request:
    types:
      - opened
      - reopened
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    # will skip if error
    continue-on-error: true
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Load and Cache Deps
        id: cache-deps
        uses: ./.github/actions/cached-deps-react
        with:
          caching: "false"
      - name: Outpu Information
        run: echo "Cache used? ${{ steps.cache-deps.outputs.used-cache}}"
      # - name: Cache dependencies
      #   id: cache
      #   uses: actions/cache@v3
      #   with:
      #     path: second-action-react/node_modules
      #     key: deps-react-${{ hashFiles('second-action-react/package-lock.json') }}
      # - name: Install dependencies
      #   if: steps.cache.outputs.cache-hit != 'true'
      #   run: cd second-action-react && npm ci
      - name: Lint code
        run: cd second-action-react && npm run lint
  test:
    runs-on: ubuntu-latest
    # will run on docker hub image
    # container:
    #   image: node:16
    # env:
    steps:
      - name: Git Code
        uses: actions/checkout@v3
      - name: Install NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Load and Cache Deps
        uses: ./.github/actions/cached-deps-react
      # - name: Cache dependencies
      #   id: cache
      #   uses: actions/cache@v3
      #   with:
      #     path: second-action-react/node_modules
      #     key: deps-react-${{ hashFiles('second-action-react/package-lock.json') }} #build a dynamic key to revalidate if lock file changed
      # - name: Install Dependencies
      #   if: steps.cache.outputs.cache-hit != 'true'
      #   run: |
      #     cd second-action-react
      #     npm ci
      - name: Run Tests
        id: testing-code
        run: cd second-action-react && npm test
      - name: Upload test report if test fails
        # outcome values success, failure, cancelled, skipped
        # failure() success() always() cancelled()
        if: failure() && steps.testing-code.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: second-action-react/test.json
  build:
    # add waiting for testing jobs first, id needs missing it will run in parallel
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }} #check id in publish JS filename
    steps:
      - name: Git Code
        uses: actions/checkout@v3
      - name: Install NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Load and Cache Deps
        uses: ./.github/actions/cached-deps-react
      # - name: Cache dependencies
      #   id: cache
      #   uses: actions/cache@v3
      #   with:
      #     path: second-action-react/node_modules
      #     key: deps-react-${{ hashFiles('second-action-react/package-lock.json') }} #build a dynamic key to revalidate if lock file changed, use **/file to look into all files and compine one hash
      # - name: Install Dependencies
      #   if: steps.cache.outputs.cache-hit != 'true'
      #   run: |
      #     cd second-action-react
      #     npm ci
      - name: Build Project
        run: cd second-action-react && npm run build
      - name: Publish JS filename
        id: publish
        run: find second-action-react/dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            second-action-react/dist
            second-action-react/package.json
  deploy:
    # add waiting for testing jobs first, id needs missing it will run in parallel
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files #same name as in build run
      - name: Output Build Files Content
        run: ls dist
      - name: Output JS filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying ..."
  information:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache-custom
        uses: actions/cache@v3
        with:
          path: .github/actions/deploy-to-s3-javascript/node_modules
          key: deps-custom-js-${{ hashFiles('.github/actions/deploy-to-s3-javascript/package-lock.json') }}
      - name: Install action dependencies
        if: steps.cache-custom.outputs.cache-hit != 'true'
        run: |
          cd .github/actions/deploy-to-s3-javascript
          npm ci
      - name: Run Custom Action - Javascript
        uses: ./.github/actions/deploy-to-s3-javascript
  report:
    needs: [lint, deploy, information]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "Something went wrong"
          echo "${{toJson(github)}}"
